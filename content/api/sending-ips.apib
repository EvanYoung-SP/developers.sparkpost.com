FORMAT: 1A
title: Sending IPs API
description: Manage the sending IPs for your account and assign them to IP pools.

# Group Sending IPs

<Banner status="info"><strong><a href="https://www.sparkpost.com/enterprise-email/">SparkPost Enterprise</a></strong> customers: IPs are managed through your TAM, please contact them directly for assistance.</Banner>

## Sending IP Object

+ Data Structure
    + external_ip (string) - Public-facing IP address of this sending IP
    + hostname (string) - Reverse DNS hostname associated with this IP
    + ip_pool (string) - IP pool this sending IP is held in
    + customer_provided (boolean) - Whether this sending IP was provided by the customer
    + auto_warmup_enabled (boolean) - Whether this sending IP will use auto warmup
    + auto_warmup_stage (number) - The sending IP's auto warmup stage between 1 and 29
+ Sample
    
    ```
    {
        "external_ip": "123.45.67.80",
        "hostname": "mta474a.sparkpostmail.com",
        "ip_pool": "default"
    }
    ```

## Retrieve a Sending IP [GET /v1/sending-ips/{external_ip}]

Retrieves a specific sending IP.

+ Request

    + Headers

            Authorization: aHR0cDovL2kuaW1ndXIuY29tL293UndTR3AucG5n
            Accept: application/json

+ Parameters
    + external_ip (required, string, `123.45.67.89`) ... The external IP of the sending IP


+ Response 200 (application/json)
    + Note: The auto_warmup_engagement_recency_threshold field only shows up for ips with auto_warmup_enabled set to true

        {
            "results": {
                "external_ip": "123.45.67.89",
                "hostname": "mta472a.sparkpostmail.com",
                "ip_pool": "cool_kids",
                "customer_provided": false,
                "auto_warmup_enabled": true,
                "auto_warmup_stage": 5,
                "auto_warmup_engagement_recency_threshold": 2
            }
        }


+ Response 400 (application/json)

        {
            "errors": [
                {
                    "message": "external ip must be a valid IPv4 address"
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "message": "Sending IP does not exist"
                }
            ]
        }


## Update a Sending IP [PUT /v1/sending-ips/{external_ip}]

+ Data Structure
    + ip_pool (string) - The IP pool to add this sending IP to.
    + auto_warmup_enabled (boolean) - Enable or Disable auto IP warmup on this IP.
    + auto_warmup_stage (number) - The auto warmup stage this IP should be set to. Must be less than or equal to current stage.

Updates which IP Pool holds the sending IP.

+ Request

    + Headers

            Authorization: aHR0cDovL2kuaW1ndXIuY29tL293UndTR3AucG5n
            Accept: application/json

    + Body

            {
                "ip_pool": "too_cool_for_pool"
            }

+ Parameters
    + external_ip (required, string, `123.45.67.89`) ... The external IP of the sending IP to update


+ Response 200 (application/json)

        {
            "results": {
                "message": "Updated Sending IP."
            }
        }

+ Response 400 (application/json)

    {
        "errors": [
            {
                "message": "IP Pool too_cool_for_pool does not exist."
            }
        ]
    }
+ Response 400 (application/json)

    {
        "errors": [
            {
                "message": "auto_warmup_stage must be between 1 and 29"
            }
        ]
    }
+ Response 400 (application/json)

    {
        "errors": [
            {
                "message": "auto_warmup_stage must be less than or equal to 5"
            }
        ]
    }

+ Response 400 (application/json)

    {
        "errors": [
            {
                "message": "auto_warmup_enabled must be true to update auto_warmup_stage"
            }
        ]
    }

+ Response 404 (application/json)

    {
        "errors": [
            { 
                "message": "Sending IP does not exist"
            }
        ]
    }


## List all sending IPs [GET /v1/sending-ips]

Returns a list of all sending IPs.

+ Request

    + Headers

            Authorization: aHR0cDovL2kuaW1ndXIuY29tL293UndTR3AucG5n
            Accept: application/json

+ Response 200 (application/json)
    + Note: The auto_warmup_engagement_recency_threshold field only shows up for ips with auto_warmup_enabled set to true

        {
            "results": [
                {
                    "external_ip": "123.45.67.89",
                    "hostname": "mta472a.sparkpostmail.com",
                    "ip_pool": "marketing",
                    "customer_provided": false,
                    "auto_warmup_enabled": true,
                    "auto_warmup_stage": 5,
                    "auto_warmup_engagement_recency_threshold": 2
                },
                {
                    "external_ip": "123.45.67.80",
                    "hostname": "mta474a.sparkpostmail.com",
                    "ip_pool": "default",
                    "customer_provided": false,
                    "auto_warmup_enabled": false
                }
            ]
        }
