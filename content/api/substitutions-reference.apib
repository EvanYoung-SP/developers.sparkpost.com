FORMAT: 1A
title: Substitutions Reference
description: Documentation for the template language and substitution capabilities of SparkPost.
full: true

# Substitutions Reference

## Expressions

Expressions allow you to insert substitution values into your content.

An expression is a `{{`, some content, followed by a `}}`. Any whitespace inside the double curly braces is ignored. All of the following are equivalent:

<REPLButton>
```
{
    "substitution_data": {
        "value": "Hello ðŸ‘‹"
    },
    "html": "{{ value }}<br />\n{{value}}<br />\n{{  value   }}<br />"
}
```
</REPLButton>

### Missing values

When looking for a key, the template look in the recipient-level substitution data followed by the recipient-level metadata. If the key doesn't exist, the template will then look for the key in the global substitution data and metadata.  An empty string is substituted for keys that do not exist or have a value of `null`.

<REPLButton>
```
{
    "substitution_data": {
        "name": "Jane",
        "age": null,
        "job": "Software Engineer" 
    },
    "html": "<ul>\n  <li>{{name}}</li>\n  <li>{{age}}</li>\n  <li>{{job}}</li>\n  <li>{{location}}</li>\n</ul>"
}
```
</REPLButton>

### Default values

To avoid rendering an empty string, you can set default values using the `or` operator. In the following example, if `name` does not exist, then the expression
will evaluate as `Customer`.

<REPLButton>
```
{
    "substitution_data": {},
    "html": "Hello {{ name or 'Customer' }}"
}
```
</REPLButton>

### Nested object paths

Nested paths allow you to reference keys that are nested inside arrays or objects using dot notation and square brackets.

<REPLButton>
```
{
    "substitution_data": {
        "address": {
            "street": "Howard Street",
            "city": "San Fransisco"
        }
    },
    "html": "Street: {{address.street}}<br/>\nCity: {{address['city']}}"
}
```
</REPLButton>

### HTML escaping

By default, values in the `html` content **are** HTML escaped. However, in the `text` content, values are **not** HTML escaped. To render a value unescaped in the `html` content, wrap it in triple curly braces, `{{{ value }}}`.

<Banner status="danger">If your messages contain user-generated content, disabling HTML escaping (without handling escaping in your application) may expose recipients of your messages to various types of attacks such as <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)">CSRF</a> or <a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)">XSS</a>.</Banner>


<REPLButton>
```
{
    "substitution_data": {
        "custom_html": "<b>Hello, World</b>"
    },
    "html": "Escaped: {{custom_html}} <br/>\nUnescaped: {{{custom_html}}}"
}
```
</REPLButton>


## Statements

Statements allow you to implement logic into your templates. You can conditionally render content and loop through the data passed to the template. They have the same syntax as expressions but start with specific keywords such as `if`.

Unlike expressions, statements don't return a value. Therefore, if they are on their own line, they will **not** produce a blank line in the resulting output. In addition, any whitespace after the statement will also not rendered.

In the following example, the template renders without blank lines: 

<REPLButton>
```
{
    "substitution_data": {
        "state": "md"
    },
    "html": "Start of template\n{{ if state == 'MD' }}\nMaryland\n{{ end }}\nEnd of template"
}
```
</REPLButton>

### `if...else` statement

The `if...else` statement allows you to conditionally render some content if a specified condition is `true` or is not `null`. If the condition is `false` or `null`, another block of content may be rendered.

```
{{if signed_up}}
Welcome
{{end}}
```

You may optionally include `then` at the end of an `if` statement.

```
{{if signed_up then}}
Welcome
{{end}}
```

You can combine multiple `if...else` statements using `elseif` statements.

```
{{if signed_up}}
Welcome
{{elseif rejected_sign_up}}
We won't bug you
{{else}}
Please sign up
{{end}}
```

#### Relational and logical operators

You can use relational and logical operators for granular control of what content renders.

```
{{if not signed_up}}
Don't forget to sign up!
{{end}}

{{if age > 30}}
do something
{{else}}
do something else
{{end}}

{{if address.state == "MD"}}
do something
{{end}}

-- multi part conditionals
{{if age > 30 and address.state == "MD"}}
do something
{{end}}
```

The relational and logical operators are as follows: 

**Relational Operators**

| Expression | Description                     |
|------------|---------------------------------|
| `x == y`   | x is equal to y                 |
| `x != y`   | x is not equal to y             |
| `x < y`    | x is less than y                |
| `x > y`    | x is greater than y             |
| `x <= y`   | x is less than or equal to y    |
| `x >= y`   | x is greater than or equal to y |


**Logical Operators**

| Expression |
|------------|
| and        |
| or         |
| not        |


**The Length Operator**

The length operator `#` gives the length of an array. From the sample data above: `#shopping_cart` produces `2`.

### `each` statement

You can use an `each` statement to iterate of array. If the array is empty of the value is `null`, nothing is rendered.

Inside the loop, you can access the current value via the `loop_var` variable. The current index can be accessed through the `loop_index` variable.

The following example iterates over array of strings and print out the value of each string:

<REPLButton>
```
{   
    "substitution_data": {
        "children": [
            "Rusty",
            "Audrey"
        ]
    },
    "html": "{{ each children }}\nYou have a child named {{loop_var}}\n{{ end }}"
}
```
</REPLButton>

To iterate over an array of objects, the syntax is the same, but access to the nested fields of the object is done using dot notation:

<REPLButton>
```
{   
    "substitution_data": {
        "shopping_cart": [
            {
              "item_name": "Jacket",
              "price": 39.99
            },
            {
                "item_name": "Gloves",
                "price": 5.00
            }
        ]
    },
    "html": "Your shopping cart has items in it: \n\n{{each shopping_cart}}\nItem:\n{{loop_var.item_name}}, Price: {{loop_var.item_price}}\n{{end}}"
}
```
</REPLButton>

#### Nested loops

When using nested loops, because you have multiple loop variables, you should access the values using `loop_vars.<name of the array>` (notice `loop_vars` is plural).
The following example uses `shopping_cart` and `a_nested_array`: 

<REPLButton>
```
{
    "substitution_data": {
        "shopping_cart": [
            {
                "item_name": "Jacket",
                "price": 39.99,
                "a_nested_array": [
                    {
                        "key": "v2"
                    },
                    {
                        "key": "v1"
                    }
                ]
            },
            {
                "item_name": "Gloves",
                "price": 5.00
            }
        ]
    },
    "html": "{{each shopping_cart}}\nItem: {{loop_vars.shopping_cart.item_name}}, Price: {{loop_vars.shopping_cart.item_price}}\nThis item has the following nested values:\n{{each loop_vars.shopping_cart.a_nested_array}}\nNested value: {{loop_vars.a_nested_array.key}}\n{{end}}\n{{end}}"
}
```
</REPLButton>


#### Array Indexing

<Banner status="info">Array indexes start at <code>1</code>. i.e. The first value in an array named <code>items</code> is <code>items[1]</code>.</Banner>

It is possible to access specific items within an array:

```
You have children named {{ children[1] }} and {{ children[2] }}.
```

Array indexing and dot notation may also be used together:

```
The first item in your shopping cart is {{ shopping_cart[1].item_name }}.
```

## Advanced

### Substitutions in email_rfc822 Headers

When it is desirable to have substitutions in RFC2047 encoded headers which are folded, be sure that
each line of the header is separately RFC2047 encoded.  Otherwise, the server will not be able to decode
the header to look for substitution syntax.

**Correct:**

```
Subject: =?gb2312?B?ztLE3M3Mz8Kyo8Gntviyu8nLye3M5c7SxNzNzM/CsqPBp7b4srvJy8ntzOU=?=
   =?gb2312?B?ztLE3M3Mz8Kyo8Gntvg=?= 
```

**Incorrect:**

```
Subject: =?gb2312?B?ztLE3M3Mz8Kyo8Gntviyu8nLye3M5c7SxNzNzM/CsqPBp7b4srvJy8ntzOU=
   ztLE3M3Mz8Kyo8Gntvg=?=
```

### Encoding Rules

* If after substitution, a text/plain or text/html part contains 8-bit data,
then that part will be quoted-printable encoded before being placed back into the
MIME structure.  The Content-Type will be updated appropriately.
* If after substitution, a header value contains 8-bit data, then the header
value will be RFC2047 base64 encoded before being written back to the headers structure.
