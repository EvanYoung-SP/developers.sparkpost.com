FORMAT: 1A
title: Substitutions Reference
description: Documentation for the template language and substitution capabilities of SparkPost.
full: true

# Substitutions Reference

## Expressions

Expressions allow you to insert substitution values into your content.

An expression is a `{{`, some content, followed by a `}}`. Any whitespace inside the double curly braces is ignored. All of the following are equivalent:

<REPLButton>
```
{
    "substitution_data": {
        "value": "Hello ðŸ‘‹"
    },
    "html": "{{ value }}<br />\n{{value}}<br />\n{{  value   }}<br />"
}
```
</REPLButton>

### Missing values

When looking for a key, the template look in the recipient-level substitution data followed by the recipient-level metadata. If the key doesn't exist, the template will then look for the key in the global substitution data and metadata.  An empty string is substituted for keys that do not exist or have a value of `null`.

<REPLButton>
```
{
    "substitution_data": {
        "name": "Jane",
        "age": null,
        "job": "Software Engineer" 
    },
    "html": "<ul>\n  <li>{{name}}</li>\n  <li>{{age}}</li>\n  <li>{{job}}</li>\n  <li>{{location}}</li>\n</ul>"
}
```
</REPLButton>

### Default values

To avoid rendering an empty string, you can set default values using the `or` operator. In the following example, if `name` does not exist, then the expression
will evaluate as `Customer`.

<REPLButton>
```
{
    "substitution_data": {},
    "html": "Hello {{ name or 'Customer' }}"
}
```
</REPLButton>

### Nested object paths

Nested paths allow you to reference keys that are nested inside arrays or objects using dot notation and square brackets.

<REPLButton>
```
{
    "substitution_data": {
        "address": {
            "street": "Howard Street",
            "city": "San Fransisco"
        }
    },
    "html": "Street: {{address.street}}<br/>\nCity: {{address['city']}}"
}
```
</REPLButton>

### HTML escaping

By default, values in the `html` content **are** HTML escaped. However, in the `text` content, values are **not** HTML escaped. To render a value unescaped in the `html` content, wrap it in triple curly braces, `{{{ value }}}`.

<Banner status="danger">If your messages contain user-generated content, disabling HTML escaping (without handling escaping in your application) may expose recipients of your messages to various types of attacks such as <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)">CSRF</a> or <a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)">XSS</a>.</Banner>


<REPLButton>
```
{
    "substitution_data": {
        "custom_html": "<b>Hello, World</b>"
    },
    "html": "Escaped: {{custom_html}} <br/>\nUnescaped: {{{custom_html}}}"
}
```
</REPLButton>


## Statements

Statements allow you to implement logic into your templates. You can conditionally render content and loop through the data passed to the template. They have the same syntax as expressions but start with specific keywords such as `if`.

Unlike expressions, statements don't return a value. Therefore, if they are on their own line, they will **not** produce a blank line in the resulting output. In addition, any whitespace after the statement will also not rendered.

In the following example, the template renders without blank lines: 

<REPLButton>
```
{
    "substitution_data": {
        "state": "md"
    },
    "html": "Start of template\n{{ if state == 'MD' }}\nMaryland\n{{ end }}\nEnd of template"
}
```
</REPLButton>

### `if...else` statement

The `if...else` statement allows you to conditionally render some content if a specified condition is `true` or is not `null`. If the condition is `false` or `null`, another block of content may be rendered.

```
{{if signed_up}}
Welcome
{{end}}
```

You may optionally include `then` at the end of an `if` statement.

```
{{if signed_up then}}
Welcome
{{end}}
```

You can combine multiple `if...else` statements using `elseif` statements.

```
{{if signed_up}}
Welcome
{{elseif rejected_sign_up}}
We won't bug you
{{else}}
Please sign up
{{end}}
```

#### Relational and logical operators

You can use relational and logical operators for granular control of what content renders.

```
{{if not signed_up}}
Don't forget to sign up!
{{end}}

{{if age > 30}}
do something
{{else}}
do something else
{{end}}

{{if address.state == "MD"}}
do something
{{end}}

-- multi part conditionals
{{if age > 30 and address.state == "MD"}}
do something
{{end}}
```

The relational and logical operators are as follows: 

**Relational Operators**

| Expression | Description                     |
|------------|---------------------------------|
| `x == y`   | x is equal to y                 |
| `x != y`   | x is not equal to y             |
| `x < y`    | x is less than y                |
| `x > y`    | x is greater than y             |
| `x <= y`   | x is less than or equal to y    |
| `x >= y`   | x is greater than or equal to y |


**Logical Operators**

| Expression |
|------------|
| and        |
| or         |
| not        |


**The Length Operator**

The length operator `#` gives the length of an array. From the sample data above: `#shopping_cart` produces `2`.

### `each` statement





