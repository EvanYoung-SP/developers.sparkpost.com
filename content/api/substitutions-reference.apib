FORMAT: 1A
title: Substitutions Reference
description: Documentation for the template language and substitution capabilities of SparkPost.
full: true

# Substitutions Reference

## Expressions

Expressions allow you to insert substitution values into your content.

An expression is a `{{`, some content, followed by a `}}`. Any whitespace inside the double curly braces is ignored. All of the following are equivalent:

<REPLButton>
```html
{{ value }}
{{value}}
{{  value   }}
```
```json
{
    "value": "Hello ðŸ‘‹"
}
```
</REPLButton>

### Missing values

When looking for a key, the template look in the recipient-level substitution data followed by the recipient-level metadata. If the key doesn't exist, the template will then look for the key in the global substitution data and metadata.  An empty string is substituted for keys that do not exist or have a value of `null`.

<REPLButton>
```html
* {{name}}
* {{age}}
* {{job}}
* {{location}}
```
```json
{
    "name": "Jane",
    "age": null,
    "job": "Software Engineer" 
}
```
</REPLButton>

### Default values

To avoid rendering an empty string, you can set default values using the `or` operator. In the following example, if `name` does not exist, then the expression
will evaluate as `Customer`.

<REPLButton>
```html
Hello {{ name or 'Customer' }}
```
```json
{}
```
</REPLButton>

### Nested object paths

Nested paths allow you to reference keys that are nested inside arrays or objects using dot notation and square brackets. You can even use variables as part of the path like `part` is used in the example below.

<REPLButton>
```html
Street: {{address.street}}
City: {{address['city']}}
Dynamic: {{address[part]}}
```
```json
{
    "address": {
        "street": "Howard Street",
        "city": "San Francisco"
    },
    "part": "street"
}
```
</REPLButton>

### HTML escaping

By default, values in the `html` content **are** HTML escaped. However, in the `text` content, values are **not** HTML escaped. To render a value unescaped in the `html` content, wrap it in triple curly braces, `{{{ value }}}`.

<Banner status="danger">If your messages contain user-generated content, disabling HTML escaping (without handling escaping in your application) may expose recipients of your messages to various types of attacks such as <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)">CSRF</a> or <a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)">XSS</a>.</Banner>


<REPLButton>
```html
Escaped: {{custom_html}}
Unescaped: {{{custom_html}}}
```
```json
{
    "custom_html": "<b>Hello, World</b>"
}
```
</REPLButton>


## Statements

Statements allow you to implement logic into your templates. You can conditionally render content and loop through the data passed to the template. They have the same syntax as expressions but start with specific keywords such as `if`.

Unlike expressions, statements don't return a value. Therefore, if they are on their own line, they will **not** produce a blank line in the resulting output. In addition, any whitespace after the statement will also not rendered.

In the following example, the template renders without blank lines: 

<REPLButton>
```html
Start of template
{{ if state == "MD" }}
Maryland
{{ end }}
End of template
```
```json
{
    "state": "MD"
}
```
</REPLButton>

### `if...else` statement

The `if...else` statement allows you to conditionally render some content if a specified condition is `true` or is not `null`. If the condition is `false` or `null`, another block of content may be rendered.

```
{{if signed_up}}
Welcome
{{end}}
```

You may optionally include `then` at the end of an `if` statement.

```
{{if signed_up then}}
Welcome
{{end}}
```

You can combine multiple `if...else` statements using `elseif` statements.

```
{{if signed_up}}
Welcome
{{elseif rejected_sign_up}}
We won't bug you
{{else}}
Please sign up
{{end}}
```

#### Relational and logical operators

You can use relational and logical operators for granular control of what content renders.

```
{{if not signed_up}}
Don't forget to sign up!
{{end}}

{{if age > 30}}
do something
{{else}}
do something else
{{end}}

{{if address.state == "MD"}}
do something
{{end}}

-- multi part conditionals
{{if age > 30 and address.state == "MD"}}
do something
{{end}}
```

The relational and logical operators are as follows: 

**Relational Operators**

| Expression | Description                     |
|------------|---------------------------------|
| `x == y`   | x is equal to y                 |
| `x != y`   | x is not equal to y             |
| `x < y`    | x is less than y                |
| `x > y`    | x is greater than y             |
| `x <= y`   | x is less than or equal to y    |
| `x >= y`   | x is greater than or equal to y |


**Logical Operators**

| Expression |
|------------|
| and        |
| or         |
| not        |


**The Length Operator**

The length operator `#` gives the length of an array.

<REPLButton>
```html
Number of states: {{#states}}
```
```json
{
    "states": ["MD", "CA"]
}
```
</REPLButton>

### `each` statement

You can use an `each` statement to iterate of array. If the array is empty of the value is `null`, nothing is rendered.

Inside the loop, you can access the current value via the `loop_var` variable. The current index can be accessed through the `loop_index` variable.

The following example iterates over array of strings and print out the value of each string:

<REPLButton>
```html
{{ each children }}
You have a child named {{loop_var}}
{{ end }}
```
```json
{
    "children": [
        "Rusty",
        "Audrey"
    ]
}
```
</REPLButton>

To iterate over an array of objects, the syntax is the same, but access to the nested fields of the object is done using dot notation:

<REPLButton>
```html
Your shopping cart has items in it:
{{each shopping_cart}}
Item: {{loop_var.name}}, Price: {{loop_var.price}}
{{end}}
```
```json
{   
    "shopping_cart": [
        {
            "name": "Jacket",
            "price": 39.99
        },
        {
            "name": "Gloves",
            "price": 5.00
        }
    ]
}
```
</REPLButton>

#### Nested loops

When using nested loops, because you have multiple loop variables, you should access the values using `loop_vars.<name of the array>` (notice `loop_vars` is plural).
The following example uses `shopping_cart` and `a_nested_array`: 

<REPLButton>
```html
---
{{each shopping_cart}}
Item: {{loop_vars.shopping_cart.name}}
Price: {{loop_vars.shopping_cart.price}}
This item has the following nested values:
{{each loop_vars.shopping_cart.a_nested_array}}
  Nested value: {{loop_vars.a_nested_array.key}}
{{end}}
---
{{end}}
```
```json
{
    "shopping_cart": [
        {
            "name": "Jacket",
            "price": 39.99,
            "a_nested_array": [
                {
                    "key": "v2"
                },
                {
                    "key": "v1"
                }
            ]
        },
        {
            "name": "Gloves",
            "price": 5.00
        }
    ]
}
```
</REPLButton>


#### Array Indexing

<Banner status="info">Array indexes start at <code>1</code>. i.e. The first value in an array named <code>items</code> is <code>items[1]</code>.</Banner>

It is possible to access specific items within an array:

```
You have children named {{ children[1] }} and {{ children[2] }}.
```

Array indexing and dot notation may also be used together:

```
The first item in your shopping cart is {{ shopping_cart[1].name }}.
```

## Links

## Macros

Macros are built-in functions. Each macro consists of a name followed by parentheses, which may enclose any arguments that the macro accepts.

#### `render_dynamic_content()`

This macro allows you to render substitution variables, stored inside the `dynamic_html` and `dynamic_part`. It will execute all expressions and will track all links.

Learn more about [dynamic content](#header-dynamic-content).

#### `empty()`

Given an array as an argument, the `empty` macro returns true if the array is empty or false if the array is not empty. This is useful for determining whether to include a header in a dynamically generated HTML table and blocking iteration of the table if it is empty.

<REPLButton>
```html
{{ if not empty(shopping_cart) }}
<table>
  <tr>
    <th>Name</th>
    <th>Price</th>
  </tr>
{{ each shopping_cart }}
  <tr>
    <td>{{loop_var.name}}</td>
    <td>${{loop_var.price}}</td>
  </tr>
{{ end }}
</table>
{{ else }}
<b>Buy something!</b>
{{ end }}
```
```json
{   
    "shopping_cart": [
        {
            "name": "Jacket",
            "price": 39.99
        },
        {
            "name": "Gloves",
            "price": 5.00
        }
    ]
}
```
</REPLButton>


#### Braces macros

If you want opening or closing braces to appear in the content, you must escape them. The four macros for outputting braces are as follows:

| Macro                    | Output | 
|--------------------------|--------|
| `opening_double_curly()` | `{{`   |
| `closing_double_curly()` | `}}`   |
| `opening_triple_curly()` | `{{{`  |
| `closing_triple_curly()` | `}}}`  |

<REPLButton>
```html
Here is a curly: {{ opening_double_curly() }}
```
</REPLButton>

## Dynamic content

Sometimes you might have some dynamic content containing expressions and links passed in through a substitution value. For example, the `my_html_chunk` substitution value below contains a link as well as a substitution expression referencing a `username`.

However, links within in substitution values are **not** converted to trackable links and expressions within substitution values are **not** executed.

<REPLButton>
```html
<body>
<p>Attempting to insert a chunk of html:</p>
{{{ my_html_chunk }}}
</body>
```
```json
{
    "my_html_chunk" : "<p><a href=\"http://www.example.com?q={{username}}\">Click here</a></p>",
    "username" : "foo"
}
```
</REPLButton>

Notice that the `username` variable was not replaced
and the link was not converted into a click trackable form.

To correctly render this dynamic content, you must do the following:

1. Add the dynamic content inside the `dynamic_html` object at the _transmission-level_ substitution data.

1. Use the `render_dynamic_content()` macro to render the `dynamic_html` variables.

Here is the functioning version of the above example:

<REPLButton>
```html
<body>
<p>Attempting to insert a chunk of html:</p>
{{ render_dynamic_content(dynamic_html.my_html_chunk) }}
</body>
```
```json
{
    "dynamic_html": {
        "my_html_chunk" : "<p><a href=\"http://www.example.com?q={{username}}\">Click here</a></p>"
    },
    "username" : "foo"
}
```
</REPLButton>

The dynamic content will be correctly rendered *without* HTML escaping,
regardless of whether double or triple curly braces are used.

#### Plain text

To insert dynamic content into the `text/plain` part of a message, place the dynamic content into the transmission-level substitution variable `dynamic_plain`.

As with `dynamic_html`, `dynamic_plain` variables must be wrapped in the `render_dynamic_content()` macro when used in the template.

**Complex Example**

Finally, as a more complex example, `render_dynamic_content()` can also be used inside an `each` loop. This example only renders the offers available as listed in the `offers` array.

<REPLButton>
```html
<h3>Today's special offers</h3>
<ul>
{{each offers}}
    <li>{{render_dynamic_content(dynamic_html[loop_var])}}</li>
{{end}}
</ul>
```
```json
{
    "name": "John",
    "offers": [ "offer1", "offer3" ],
    "dynamic_html": {
        "offer1": "<a href=\"http://t.com/offer/1?name={{name}}\">Premium-brand wirecutters</a>",
        "offer2": "<a href=\"http://t.com/offer/2?name={{name}}\">Corks</a>",
        "offer3": "<a href=\"http://t.com/offer/3?name={{name}}\">Super-effective bug spray</a>"
    }
}
```
</REPLButton>

## Advanced

### Substitutions in email_rfc822 Headers

When it is desirable to have substitutions in RFC2047 encoded headers which are folded, be sure that
each line of the header is separately RFC2047 encoded.  Otherwise, the server will not be able to decode
the header to look for substitution syntax.

**Correct:**

```
Subject: =?gb2312?B?ztLE3M3Mz8Kyo8Gntviyu8nLye3M5c7SxNzNzM/CsqPBp7b4srvJy8ntzOU=?=
   =?gb2312?B?ztLE3M3Mz8Kyo8Gntvg=?= 
```

**Incorrect:**

```
Subject: =?gb2312?B?ztLE3M3Mz8Kyo8Gntviyu8nLye3M5c7SxNzNzM/CsqPBp7b4srvJy8ntzOU=
   ztLE3M3Mz8Kyo8Gntvg=?=
```

### Encoding Rules

* If after substitution, a text/plain or text/html part contains 8-bit data,
then that part will be quoted-printable encoded before being placed back into the
MIME structure.  The Content-Type will be updated appropriately.
* If after substitution, a header value contains 8-bit data, then the header
value will be RFC2047 base64 encoded before being written back to the headers structure.
